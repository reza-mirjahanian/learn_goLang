// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/ingredient"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/predicate"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/recipe"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/recipeingredient"
)

// RecipeIngredientQuery is the builder for querying RecipeIngredient entities.
type RecipeIngredientQuery struct {
	config
	ctx            *QueryContext
	order          []recipeingredient.OrderOption
	inters         []Interceptor
	predicates     []predicate.RecipeIngredient
	withRecipe     *RecipeQuery
	withIngredient *IngredientQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecipeIngredientQuery builder.
func (riq *RecipeIngredientQuery) Where(ps ...predicate.RecipeIngredient) *RecipeIngredientQuery {
	riq.predicates = append(riq.predicates, ps...)
	return riq
}

// Limit the number of records to be returned by this query.
func (riq *RecipeIngredientQuery) Limit(limit int) *RecipeIngredientQuery {
	riq.ctx.Limit = &limit
	return riq
}

// Offset to start from.
func (riq *RecipeIngredientQuery) Offset(offset int) *RecipeIngredientQuery {
	riq.ctx.Offset = &offset
	return riq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (riq *RecipeIngredientQuery) Unique(unique bool) *RecipeIngredientQuery {
	riq.ctx.Unique = &unique
	return riq
}

// Order specifies how the records should be ordered.
func (riq *RecipeIngredientQuery) Order(o ...recipeingredient.OrderOption) *RecipeIngredientQuery {
	riq.order = append(riq.order, o...)
	return riq
}

// QueryRecipe chains the current query on the "recipe" edge.
func (riq *RecipeIngredientQuery) QueryRecipe() *RecipeQuery {
	query := (&RecipeClient{config: riq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := riq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := riq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipeingredient.Table, recipeingredient.FieldID, selector),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recipeingredient.RecipeTable, recipeingredient.RecipeColumn),
		)
		fromU = sqlgraph.SetNeighbors(riq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIngredient chains the current query on the "ingredient" edge.
func (riq *RecipeIngredientQuery) QueryIngredient() *IngredientQuery {
	query := (&IngredientClient{config: riq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := riq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := riq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipeingredient.Table, recipeingredient.FieldID, selector),
			sqlgraph.To(ingredient.Table, ingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, recipeingredient.IngredientTable, recipeingredient.IngredientPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(riq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecipeIngredient entity from the query.
// Returns a *NotFoundError when no RecipeIngredient was found.
func (riq *RecipeIngredientQuery) First(ctx context.Context) (*RecipeIngredient, error) {
	nodes, err := riq.Limit(1).All(setContextOp(ctx, riq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recipeingredient.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (riq *RecipeIngredientQuery) FirstX(ctx context.Context) *RecipeIngredient {
	node, err := riq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecipeIngredient ID from the query.
// Returns a *NotFoundError when no RecipeIngredient ID was found.
func (riq *RecipeIngredientQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = riq.Limit(1).IDs(setContextOp(ctx, riq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recipeingredient.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (riq *RecipeIngredientQuery) FirstIDX(ctx context.Context) int {
	id, err := riq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecipeIngredient entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecipeIngredient entity is found.
// Returns a *NotFoundError when no RecipeIngredient entities are found.
func (riq *RecipeIngredientQuery) Only(ctx context.Context) (*RecipeIngredient, error) {
	nodes, err := riq.Limit(2).All(setContextOp(ctx, riq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recipeingredient.Label}
	default:
		return nil, &NotSingularError{recipeingredient.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (riq *RecipeIngredientQuery) OnlyX(ctx context.Context) *RecipeIngredient {
	node, err := riq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecipeIngredient ID in the query.
// Returns a *NotSingularError when more than one RecipeIngredient ID is found.
// Returns a *NotFoundError when no entities are found.
func (riq *RecipeIngredientQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = riq.Limit(2).IDs(setContextOp(ctx, riq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = &NotSingularError{recipeingredient.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (riq *RecipeIngredientQuery) OnlyIDX(ctx context.Context) int {
	id, err := riq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecipeIngredients.
func (riq *RecipeIngredientQuery) All(ctx context.Context) ([]*RecipeIngredient, error) {
	ctx = setContextOp(ctx, riq.ctx, "All")
	if err := riq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecipeIngredient, *RecipeIngredientQuery]()
	return withInterceptors[[]*RecipeIngredient](ctx, riq, qr, riq.inters)
}

// AllX is like All, but panics if an error occurs.
func (riq *RecipeIngredientQuery) AllX(ctx context.Context) []*RecipeIngredient {
	nodes, err := riq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecipeIngredient IDs.
func (riq *RecipeIngredientQuery) IDs(ctx context.Context) (ids []int, err error) {
	if riq.ctx.Unique == nil && riq.path != nil {
		riq.Unique(true)
	}
	ctx = setContextOp(ctx, riq.ctx, "IDs")
	if err = riq.Select(recipeingredient.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (riq *RecipeIngredientQuery) IDsX(ctx context.Context) []int {
	ids, err := riq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (riq *RecipeIngredientQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, riq.ctx, "Count")
	if err := riq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, riq, querierCount[*RecipeIngredientQuery](), riq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (riq *RecipeIngredientQuery) CountX(ctx context.Context) int {
	count, err := riq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (riq *RecipeIngredientQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, riq.ctx, "Exist")
	switch _, err := riq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (riq *RecipeIngredientQuery) ExistX(ctx context.Context) bool {
	exist, err := riq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecipeIngredientQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (riq *RecipeIngredientQuery) Clone() *RecipeIngredientQuery {
	if riq == nil {
		return nil
	}
	return &RecipeIngredientQuery{
		config:         riq.config,
		ctx:            riq.ctx.Clone(),
		order:          append([]recipeingredient.OrderOption{}, riq.order...),
		inters:         append([]Interceptor{}, riq.inters...),
		predicates:     append([]predicate.RecipeIngredient{}, riq.predicates...),
		withRecipe:     riq.withRecipe.Clone(),
		withIngredient: riq.withIngredient.Clone(),
		// clone intermediate query.
		sql:  riq.sql.Clone(),
		path: riq.path,
	}
}

// WithRecipe tells the query-builder to eager-load the nodes that are connected to
// the "recipe" edge. The optional arguments are used to configure the query builder of the edge.
func (riq *RecipeIngredientQuery) WithRecipe(opts ...func(*RecipeQuery)) *RecipeIngredientQuery {
	query := (&RecipeClient{config: riq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	riq.withRecipe = query
	return riq
}

// WithIngredient tells the query-builder to eager-load the nodes that are connected to
// the "ingredient" edge. The optional arguments are used to configure the query builder of the edge.
func (riq *RecipeIngredientQuery) WithIngredient(opts ...func(*IngredientQuery)) *RecipeIngredientQuery {
	query := (&IngredientClient{config: riq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	riq.withIngredient = query
	return riq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecipeIngredient.Query().
//		GroupBy(recipeingredient.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (riq *RecipeIngredientQuery) GroupBy(field string, fields ...string) *RecipeIngredientGroupBy {
	riq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecipeIngredientGroupBy{build: riq}
	grbuild.flds = &riq.ctx.Fields
	grbuild.label = recipeingredient.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.RecipeIngredient.Query().
//		Select(recipeingredient.FieldQuantity).
//		Scan(ctx, &v)
func (riq *RecipeIngredientQuery) Select(fields ...string) *RecipeIngredientSelect {
	riq.ctx.Fields = append(riq.ctx.Fields, fields...)
	sbuild := &RecipeIngredientSelect{RecipeIngredientQuery: riq}
	sbuild.label = recipeingredient.Label
	sbuild.flds, sbuild.scan = &riq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecipeIngredientSelect configured with the given aggregations.
func (riq *RecipeIngredientQuery) Aggregate(fns ...AggregateFunc) *RecipeIngredientSelect {
	return riq.Select().Aggregate(fns...)
}

func (riq *RecipeIngredientQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range riq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, riq); err != nil {
				return err
			}
		}
	}
	for _, f := range riq.ctx.Fields {
		if !recipeingredient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if riq.path != nil {
		prev, err := riq.path(ctx)
		if err != nil {
			return err
		}
		riq.sql = prev
	}
	return nil
}

func (riq *RecipeIngredientQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecipeIngredient, error) {
	var (
		nodes       = []*RecipeIngredient{}
		withFKs     = riq.withFKs
		_spec       = riq.querySpec()
		loadedTypes = [2]bool{
			riq.withRecipe != nil,
			riq.withIngredient != nil,
		}
	)
	if riq.withRecipe != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, recipeingredient.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecipeIngredient).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecipeIngredient{config: riq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, riq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := riq.withRecipe; query != nil {
		if err := riq.loadRecipe(ctx, query, nodes, nil,
			func(n *RecipeIngredient, e *Recipe) { n.Edges.Recipe = e }); err != nil {
			return nil, err
		}
	}
	if query := riq.withIngredient; query != nil {
		if err := riq.loadIngredient(ctx, query, nodes,
			func(n *RecipeIngredient) { n.Edges.Ingredient = []*Ingredient{} },
			func(n *RecipeIngredient, e *Ingredient) { n.Edges.Ingredient = append(n.Edges.Ingredient, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (riq *RecipeIngredientQuery) loadRecipe(ctx context.Context, query *RecipeQuery, nodes []*RecipeIngredient, init func(*RecipeIngredient), assign func(*RecipeIngredient, *Recipe)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RecipeIngredient)
	for i := range nodes {
		if nodes[i].recipe_recipeingredient == nil {
			continue
		}
		fk := *nodes[i].recipe_recipeingredient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(recipe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "recipe_recipeingredient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (riq *RecipeIngredientQuery) loadIngredient(ctx context.Context, query *IngredientQuery, nodes []*RecipeIngredient, init func(*RecipeIngredient), assign func(*RecipeIngredient, *Ingredient)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*RecipeIngredient)
	nids := make(map[int]map[*RecipeIngredient]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(recipeingredient.IngredientTable)
		s.Join(joinT).On(s.C(ingredient.FieldID), joinT.C(recipeingredient.IngredientPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(recipeingredient.IngredientPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(recipeingredient.IngredientPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*RecipeIngredient]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Ingredient](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "ingredient" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (riq *RecipeIngredientQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := riq.querySpec()
	_spec.Node.Columns = riq.ctx.Fields
	if len(riq.ctx.Fields) > 0 {
		_spec.Unique = riq.ctx.Unique != nil && *riq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, riq.driver, _spec)
}

func (riq *RecipeIngredientQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recipeingredient.Table, recipeingredient.Columns, sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt))
	_spec.From = riq.sql
	if unique := riq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if riq.path != nil {
		_spec.Unique = true
	}
	if fields := riq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipeingredient.FieldID)
		for i := range fields {
			if fields[i] != recipeingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := riq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := riq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := riq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := riq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (riq *RecipeIngredientQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(riq.driver.Dialect())
	t1 := builder.Table(recipeingredient.Table)
	columns := riq.ctx.Fields
	if len(columns) == 0 {
		columns = recipeingredient.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if riq.sql != nil {
		selector = riq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if riq.ctx.Unique != nil && *riq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range riq.predicates {
		p(selector)
	}
	for _, p := range riq.order {
		p(selector)
	}
	if offset := riq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := riq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecipeIngredientGroupBy is the group-by builder for RecipeIngredient entities.
type RecipeIngredientGroupBy struct {
	selector
	build *RecipeIngredientQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rigb *RecipeIngredientGroupBy) Aggregate(fns ...AggregateFunc) *RecipeIngredientGroupBy {
	rigb.fns = append(rigb.fns, fns...)
	return rigb
}

// Scan applies the selector query and scans the result into the given value.
func (rigb *RecipeIngredientGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rigb.build.ctx, "GroupBy")
	if err := rigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeIngredientQuery, *RecipeIngredientGroupBy](ctx, rigb.build, rigb, rigb.build.inters, v)
}

func (rigb *RecipeIngredientGroupBy) sqlScan(ctx context.Context, root *RecipeIngredientQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rigb.fns))
	for _, fn := range rigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rigb.flds)+len(rigb.fns))
		for _, f := range *rigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecipeIngredientSelect is the builder for selecting fields of RecipeIngredient entities.
type RecipeIngredientSelect struct {
	*RecipeIngredientQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ris *RecipeIngredientSelect) Aggregate(fns ...AggregateFunc) *RecipeIngredientSelect {
	ris.fns = append(ris.fns, fns...)
	return ris
}

// Scan applies the selector query and scans the result into the given value.
func (ris *RecipeIngredientSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ris.ctx, "Select")
	if err := ris.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeIngredientQuery, *RecipeIngredientSelect](ctx, ris.RecipeIngredientQuery, ris, ris.inters, v)
}

func (ris *RecipeIngredientSelect) sqlScan(ctx context.Context, root *RecipeIngredientQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ris.fns))
	for _, fn := range ris.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ris.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ris.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
