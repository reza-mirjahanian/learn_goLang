// Code generated by ent, DO NOT EDIT.

package pantry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pantry type in the database.
	Label = "pantry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// EdgeIngredient holds the string denoting the ingredient edge name in mutations.
	EdgeIngredient = "ingredient"
	// Table holds the table name of the pantry in the database.
	Table = "pantries"
	// IngredientTable is the table that holds the ingredient relation/edge.
	IngredientTable = "ingredients"
	// IngredientInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientInverseTable = "ingredients"
	// IngredientColumn is the table column denoting the ingredient relation/edge.
	IngredientColumn = "pantry_ingredient"
)

// Columns holds all SQL columns for pantry fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Pantry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByIngredientField orders the results by ingredient field.
func ByIngredientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientStep(), sql.OrderByField(field, opts...))
	}
}
func newIngredientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, IngredientTable, IngredientColumn),
	)
}
