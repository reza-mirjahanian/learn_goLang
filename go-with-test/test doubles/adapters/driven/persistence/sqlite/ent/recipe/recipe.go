// Code generated by ent, DO NOT EDIT.

package recipe

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the recipe type in the database.
	Label = "recipe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldMealType holds the string denoting the meal_type field in the database.
	FieldMealType = "meal_type"
	// EdgeRecipeingredient holds the string denoting the recipeingredient edge name in mutations.
	EdgeRecipeingredient = "recipeingredient"
	// Table holds the table name of the recipe in the database.
	Table = "recipes"
	// RecipeingredientTable is the table that holds the recipeingredient relation/edge.
	RecipeingredientTable = "recipe_ingredients"
	// RecipeingredientInverseTable is the table name for the RecipeIngredient entity.
	// It exists in this package in order to avoid circular dependency with the "recipeingredient" package.
	RecipeingredientInverseTable = "recipe_ingredients"
	// RecipeingredientColumn is the table column denoting the recipeingredient relation/edge.
	RecipeingredientColumn = "recipe_recipeingredient"
)

// Columns holds all SQL columns for recipe fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldMealType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Recipe queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByMealType orders the results by the meal_type field.
func ByMealType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMealType, opts...).ToFunc()
}

// ByRecipeingredientCount orders the results by recipeingredient count.
func ByRecipeingredientCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecipeingredientStep(), opts...)
	}
}

// ByRecipeingredient orders the results by recipeingredient terms.
func ByRecipeingredient(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipeingredientStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecipeingredientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipeingredientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecipeingredientTable, RecipeingredientColumn),
	)
}
