// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/ingredient"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/pantry"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/predicate"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/recipe"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/recipeingredient"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIngredient       = "Ingredient"
	TypePantry           = "Pantry"
	TypeRecipe           = "Recipe"
	TypeRecipeIngredient = "RecipeIngredient"
)

// IngredientMutation represents an operation that mutates the Ingredient nodes in the graph.
type IngredientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	vegan                   *bool
	clearedFields           map[string]struct{}
	pantry                  *int
	clearedpantry           bool
	recipeingredient        map[int]struct{}
	removedrecipeingredient map[int]struct{}
	clearedrecipeingredient bool
	done                    bool
	oldValue                func(context.Context) (*Ingredient, error)
	predicates              []predicate.Ingredient
}

var _ ent.Mutation = (*IngredientMutation)(nil)

// ingredientOption allows management of the mutation configuration using functional options.
type ingredientOption func(*IngredientMutation)

// newIngredientMutation creates new mutation for the Ingredient entity.
func newIngredientMutation(c config, op Op, opts ...ingredientOption) *IngredientMutation {
	m := &IngredientMutation{
		config:        c,
		op:            op,
		typ:           TypeIngredient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIngredientID sets the ID field of the mutation.
func withIngredientID(id int) ingredientOption {
	return func(m *IngredientMutation) {
		var (
			err   error
			once  sync.Once
			value *Ingredient
		)
		m.oldValue = func(ctx context.Context) (*Ingredient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ingredient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIngredient sets the old Ingredient of the mutation.
func withIngredient(node *Ingredient) ingredientOption {
	return func(m *IngredientMutation) {
		m.oldValue = func(context.Context) (*Ingredient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IngredientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IngredientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IngredientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IngredientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ingredient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *IngredientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IngredientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IngredientMutation) ResetName() {
	m.name = nil
}

// SetVegan sets the "vegan" field.
func (m *IngredientMutation) SetVegan(b bool) {
	m.vegan = &b
}

// Vegan returns the value of the "vegan" field in the mutation.
func (m *IngredientMutation) Vegan() (r bool, exists bool) {
	v := m.vegan
	if v == nil {
		return
	}
	return *v, true
}

// OldVegan returns the old "vegan" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldVegan(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVegan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVegan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVegan: %w", err)
	}
	return oldValue.Vegan, nil
}

// ResetVegan resets all changes to the "vegan" field.
func (m *IngredientMutation) ResetVegan() {
	m.vegan = nil
}

// SetPantryID sets the "pantry" edge to the Pantry entity by id.
func (m *IngredientMutation) SetPantryID(id int) {
	m.pantry = &id
}

// ClearPantry clears the "pantry" edge to the Pantry entity.
func (m *IngredientMutation) ClearPantry() {
	m.clearedpantry = true
}

// PantryCleared reports if the "pantry" edge to the Pantry entity was cleared.
func (m *IngredientMutation) PantryCleared() bool {
	return m.clearedpantry
}

// PantryID returns the "pantry" edge ID in the mutation.
func (m *IngredientMutation) PantryID() (id int, exists bool) {
	if m.pantry != nil {
		return *m.pantry, true
	}
	return
}

// PantryIDs returns the "pantry" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PantryID instead. It exists only for internal usage by the builders.
func (m *IngredientMutation) PantryIDs() (ids []int) {
	if id := m.pantry; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPantry resets all changes to the "pantry" edge.
func (m *IngredientMutation) ResetPantry() {
	m.pantry = nil
	m.clearedpantry = false
}

// AddRecipeingredientIDs adds the "recipeingredient" edge to the RecipeIngredient entity by ids.
func (m *IngredientMutation) AddRecipeingredientIDs(ids ...int) {
	if m.recipeingredient == nil {
		m.recipeingredient = make(map[int]struct{})
	}
	for i := range ids {
		m.recipeingredient[ids[i]] = struct{}{}
	}
}

// ClearRecipeingredient clears the "recipeingredient" edge to the RecipeIngredient entity.
func (m *IngredientMutation) ClearRecipeingredient() {
	m.clearedrecipeingredient = true
}

// RecipeingredientCleared reports if the "recipeingredient" edge to the RecipeIngredient entity was cleared.
func (m *IngredientMutation) RecipeingredientCleared() bool {
	return m.clearedrecipeingredient
}

// RemoveRecipeingredientIDs removes the "recipeingredient" edge to the RecipeIngredient entity by IDs.
func (m *IngredientMutation) RemoveRecipeingredientIDs(ids ...int) {
	if m.removedrecipeingredient == nil {
		m.removedrecipeingredient = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipeingredient, ids[i])
		m.removedrecipeingredient[ids[i]] = struct{}{}
	}
}

// RemovedRecipeingredient returns the removed IDs of the "recipeingredient" edge to the RecipeIngredient entity.
func (m *IngredientMutation) RemovedRecipeingredientIDs() (ids []int) {
	for id := range m.removedrecipeingredient {
		ids = append(ids, id)
	}
	return
}

// RecipeingredientIDs returns the "recipeingredient" edge IDs in the mutation.
func (m *IngredientMutation) RecipeingredientIDs() (ids []int) {
	for id := range m.recipeingredient {
		ids = append(ids, id)
	}
	return
}

// ResetRecipeingredient resets all changes to the "recipeingredient" edge.
func (m *IngredientMutation) ResetRecipeingredient() {
	m.recipeingredient = nil
	m.clearedrecipeingredient = false
	m.removedrecipeingredient = nil
}

// Where appends a list predicates to the IngredientMutation builder.
func (m *IngredientMutation) Where(ps ...predicate.Ingredient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IngredientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IngredientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ingredient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IngredientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IngredientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ingredient).
func (m *IngredientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IngredientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, ingredient.FieldName)
	}
	if m.vegan != nil {
		fields = append(fields, ingredient.FieldVegan)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IngredientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ingredient.FieldName:
		return m.Name()
	case ingredient.FieldVegan:
		return m.Vegan()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IngredientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ingredient.FieldName:
		return m.OldName(ctx)
	case ingredient.FieldVegan:
		return m.OldVegan(ctx)
	}
	return nil, fmt.Errorf("unknown Ingredient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ingredient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ingredient.FieldVegan:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVegan(v)
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IngredientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IngredientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IngredientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IngredientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IngredientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ingredient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IngredientMutation) ResetField(name string) error {
	switch name {
	case ingredient.FieldName:
		m.ResetName()
		return nil
	case ingredient.FieldVegan:
		m.ResetVegan()
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IngredientMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pantry != nil {
		edges = append(edges, ingredient.EdgePantry)
	}
	if m.recipeingredient != nil {
		edges = append(edges, ingredient.EdgeRecipeingredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IngredientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgePantry:
		if id := m.pantry; id != nil {
			return []ent.Value{*id}
		}
	case ingredient.EdgeRecipeingredient:
		ids := make([]ent.Value, 0, len(m.recipeingredient))
		for id := range m.recipeingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IngredientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrecipeingredient != nil {
		edges = append(edges, ingredient.EdgeRecipeingredient)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IngredientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgeRecipeingredient:
		ids := make([]ent.Value, 0, len(m.removedrecipeingredient))
		for id := range m.removedrecipeingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IngredientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpantry {
		edges = append(edges, ingredient.EdgePantry)
	}
	if m.clearedrecipeingredient {
		edges = append(edges, ingredient.EdgeRecipeingredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IngredientMutation) EdgeCleared(name string) bool {
	switch name {
	case ingredient.EdgePantry:
		return m.clearedpantry
	case ingredient.EdgeRecipeingredient:
		return m.clearedrecipeingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IngredientMutation) ClearEdge(name string) error {
	switch name {
	case ingredient.EdgePantry:
		m.ClearPantry()
		return nil
	}
	return fmt.Errorf("unknown Ingredient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IngredientMutation) ResetEdge(name string) error {
	switch name {
	case ingredient.EdgePantry:
		m.ResetPantry()
		return nil
	case ingredient.EdgeRecipeingredient:
		m.ResetRecipeingredient()
		return nil
	}
	return fmt.Errorf("unknown Ingredient edge %s", name)
}

// PantryMutation represents an operation that mutates the Pantry nodes in the graph.
type PantryMutation struct {
	config
	op                Op
	typ               string
	id                *int
	quantity          *int
	addquantity       *int
	clearedFields     map[string]struct{}
	ingredient        *int
	clearedingredient bool
	done              bool
	oldValue          func(context.Context) (*Pantry, error)
	predicates        []predicate.Pantry
}

var _ ent.Mutation = (*PantryMutation)(nil)

// pantryOption allows management of the mutation configuration using functional options.
type pantryOption func(*PantryMutation)

// newPantryMutation creates new mutation for the Pantry entity.
func newPantryMutation(c config, op Op, opts ...pantryOption) *PantryMutation {
	m := &PantryMutation{
		config:        c,
		op:            op,
		typ:           TypePantry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPantryID sets the ID field of the mutation.
func withPantryID(id int) pantryOption {
	return func(m *PantryMutation) {
		var (
			err   error
			once  sync.Once
			value *Pantry
		)
		m.oldValue = func(ctx context.Context) (*Pantry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pantry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPantry sets the old Pantry of the mutation.
func withPantry(node *Pantry) pantryOption {
	return func(m *PantryMutation) {
		m.oldValue = func(context.Context) (*Pantry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PantryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PantryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PantryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PantryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pantry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuantity sets the "quantity" field.
func (m *PantryMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *PantryMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Pantry entity.
// If the Pantry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PantryMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *PantryMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *PantryMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *PantryMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetIngredientID sets the "ingredient" edge to the Ingredient entity by id.
func (m *PantryMutation) SetIngredientID(id int) {
	m.ingredient = &id
}

// ClearIngredient clears the "ingredient" edge to the Ingredient entity.
func (m *PantryMutation) ClearIngredient() {
	m.clearedingredient = true
}

// IngredientCleared reports if the "ingredient" edge to the Ingredient entity was cleared.
func (m *PantryMutation) IngredientCleared() bool {
	return m.clearedingredient
}

// IngredientID returns the "ingredient" edge ID in the mutation.
func (m *PantryMutation) IngredientID() (id int, exists bool) {
	if m.ingredient != nil {
		return *m.ingredient, true
	}
	return
}

// IngredientIDs returns the "ingredient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IngredientID instead. It exists only for internal usage by the builders.
func (m *PantryMutation) IngredientIDs() (ids []int) {
	if id := m.ingredient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIngredient resets all changes to the "ingredient" edge.
func (m *PantryMutation) ResetIngredient() {
	m.ingredient = nil
	m.clearedingredient = false
}

// Where appends a list predicates to the PantryMutation builder.
func (m *PantryMutation) Where(ps ...predicate.Pantry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PantryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PantryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pantry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PantryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PantryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pantry).
func (m *PantryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PantryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.quantity != nil {
		fields = append(fields, pantry.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PantryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pantry.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PantryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pantry.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown Pantry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PantryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pantry.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Pantry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PantryMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, pantry.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PantryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pantry.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PantryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pantry.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Pantry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PantryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PantryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PantryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pantry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PantryMutation) ResetField(name string) error {
	switch name {
	case pantry.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown Pantry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PantryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ingredient != nil {
		edges = append(edges, pantry.EdgeIngredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PantryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pantry.EdgeIngredient:
		if id := m.ingredient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PantryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PantryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PantryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedingredient {
		edges = append(edges, pantry.EdgeIngredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PantryMutation) EdgeCleared(name string) bool {
	switch name {
	case pantry.EdgeIngredient:
		return m.clearedingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PantryMutation) ClearEdge(name string) error {
	switch name {
	case pantry.EdgeIngredient:
		m.ClearIngredient()
		return nil
	}
	return fmt.Errorf("unknown Pantry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PantryMutation) ResetEdge(name string) error {
	switch name {
	case pantry.EdgeIngredient:
		m.ResetIngredient()
		return nil
	}
	return fmt.Errorf("unknown Pantry edge %s", name)
}

// RecipeMutation represents an operation that mutates the Recipe nodes in the graph.
type RecipeMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	description             *string
	meal_type               *int
	addmeal_type            *int
	clearedFields           map[string]struct{}
	recipeingredient        map[int]struct{}
	removedrecipeingredient map[int]struct{}
	clearedrecipeingredient bool
	done                    bool
	oldValue                func(context.Context) (*Recipe, error)
	predicates              []predicate.Recipe
}

var _ ent.Mutation = (*RecipeMutation)(nil)

// recipeOption allows management of the mutation configuration using functional options.
type recipeOption func(*RecipeMutation)

// newRecipeMutation creates new mutation for the Recipe entity.
func newRecipeMutation(c config, op Op, opts ...recipeOption) *RecipeMutation {
	m := &RecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeID sets the ID field of the mutation.
func withRecipeID(id int) recipeOption {
	return func(m *RecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *Recipe
		)
		m.oldValue = func(ctx context.Context) (*Recipe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipe sets the old Recipe of the mutation.
func withRecipe(node *Recipe) recipeOption {
	return func(m *RecipeMutation) {
		m.oldValue = func(context.Context) (*Recipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecipeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Recipe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RecipeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RecipeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RecipeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RecipeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RecipeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RecipeMutation) ResetDescription() {
	m.description = nil
}

// SetMealType sets the "meal_type" field.
func (m *RecipeMutation) SetMealType(i int) {
	m.meal_type = &i
	m.addmeal_type = nil
}

// MealType returns the value of the "meal_type" field in the mutation.
func (m *RecipeMutation) MealType() (r int, exists bool) {
	v := m.meal_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMealType returns the old "meal_type" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldMealType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMealType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMealType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMealType: %w", err)
	}
	return oldValue.MealType, nil
}

// AddMealType adds i to the "meal_type" field.
func (m *RecipeMutation) AddMealType(i int) {
	if m.addmeal_type != nil {
		*m.addmeal_type += i
	} else {
		m.addmeal_type = &i
	}
}

// AddedMealType returns the value that was added to the "meal_type" field in this mutation.
func (m *RecipeMutation) AddedMealType() (r int, exists bool) {
	v := m.addmeal_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetMealType resets all changes to the "meal_type" field.
func (m *RecipeMutation) ResetMealType() {
	m.meal_type = nil
	m.addmeal_type = nil
}

// AddRecipeingredientIDs adds the "recipeingredient" edge to the RecipeIngredient entity by ids.
func (m *RecipeMutation) AddRecipeingredientIDs(ids ...int) {
	if m.recipeingredient == nil {
		m.recipeingredient = make(map[int]struct{})
	}
	for i := range ids {
		m.recipeingredient[ids[i]] = struct{}{}
	}
}

// ClearRecipeingredient clears the "recipeingredient" edge to the RecipeIngredient entity.
func (m *RecipeMutation) ClearRecipeingredient() {
	m.clearedrecipeingredient = true
}

// RecipeingredientCleared reports if the "recipeingredient" edge to the RecipeIngredient entity was cleared.
func (m *RecipeMutation) RecipeingredientCleared() bool {
	return m.clearedrecipeingredient
}

// RemoveRecipeingredientIDs removes the "recipeingredient" edge to the RecipeIngredient entity by IDs.
func (m *RecipeMutation) RemoveRecipeingredientIDs(ids ...int) {
	if m.removedrecipeingredient == nil {
		m.removedrecipeingredient = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipeingredient, ids[i])
		m.removedrecipeingredient[ids[i]] = struct{}{}
	}
}

// RemovedRecipeingredient returns the removed IDs of the "recipeingredient" edge to the RecipeIngredient entity.
func (m *RecipeMutation) RemovedRecipeingredientIDs() (ids []int) {
	for id := range m.removedrecipeingredient {
		ids = append(ids, id)
	}
	return
}

// RecipeingredientIDs returns the "recipeingredient" edge IDs in the mutation.
func (m *RecipeMutation) RecipeingredientIDs() (ids []int) {
	for id := range m.recipeingredient {
		ids = append(ids, id)
	}
	return
}

// ResetRecipeingredient resets all changes to the "recipeingredient" edge.
func (m *RecipeMutation) ResetRecipeingredient() {
	m.recipeingredient = nil
	m.clearedrecipeingredient = false
	m.removedrecipeingredient = nil
}

// Where appends a list predicates to the RecipeMutation builder.
func (m *RecipeMutation) Where(ps ...predicate.Recipe) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecipeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecipeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Recipe, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecipeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecipeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Recipe).
func (m *RecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, recipe.FieldName)
	}
	if m.description != nil {
		fields = append(fields, recipe.FieldDescription)
	}
	if m.meal_type != nil {
		fields = append(fields, recipe.FieldMealType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldName:
		return m.Name()
	case recipe.FieldDescription:
		return m.Description()
	case recipe.FieldMealType:
		return m.MealType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipe.FieldName:
		return m.OldName(ctx)
	case recipe.FieldDescription:
		return m.OldDescription(ctx)
	case recipe.FieldMealType:
		return m.OldMealType(ctx)
	}
	return nil, fmt.Errorf("unknown Recipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case recipe.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case recipe.FieldMealType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMealType(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeMutation) AddedFields() []string {
	var fields []string
	if m.addmeal_type != nil {
		fields = append(fields, recipe.FieldMealType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldMealType:
		return m.AddedMealType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldMealType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMealType(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Recipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeMutation) ResetField(name string) error {
	switch name {
	case recipe.FieldName:
		m.ResetName()
		return nil
	case recipe.FieldDescription:
		m.ResetDescription()
		return nil
	case recipe.FieldMealType:
		m.ResetMealType()
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipeingredient != nil {
		edges = append(edges, recipe.EdgeRecipeingredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeRecipeingredient:
		ids := make([]ent.Value, 0, len(m.recipeingredient))
		for id := range m.recipeingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipeingredient != nil {
		edges = append(edges, recipe.EdgeRecipeingredient)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeRecipeingredient:
		ids := make([]ent.Value, 0, len(m.removedrecipeingredient))
		for id := range m.removedrecipeingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipeingredient {
		edges = append(edges, recipe.EdgeRecipeingredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeMutation) EdgeCleared(name string) bool {
	switch name {
	case recipe.EdgeRecipeingredient:
		return m.clearedrecipeingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Recipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeMutation) ResetEdge(name string) error {
	switch name {
	case recipe.EdgeRecipeingredient:
		m.ResetRecipeingredient()
		return nil
	}
	return fmt.Errorf("unknown Recipe edge %s", name)
}

// RecipeIngredientMutation represents an operation that mutates the RecipeIngredient nodes in the graph.
type RecipeIngredientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	quantity          *int
	addquantity       *int
	clearedFields     map[string]struct{}
	recipe            *int
	clearedrecipe     bool
	ingredient        map[int]struct{}
	removedingredient map[int]struct{}
	clearedingredient bool
	done              bool
	oldValue          func(context.Context) (*RecipeIngredient, error)
	predicates        []predicate.RecipeIngredient
}

var _ ent.Mutation = (*RecipeIngredientMutation)(nil)

// recipeingredientOption allows management of the mutation configuration using functional options.
type recipeingredientOption func(*RecipeIngredientMutation)

// newRecipeIngredientMutation creates new mutation for the RecipeIngredient entity.
func newRecipeIngredientMutation(c config, op Op, opts ...recipeingredientOption) *RecipeIngredientMutation {
	m := &RecipeIngredientMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipeIngredient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeIngredientID sets the ID field of the mutation.
func withRecipeIngredientID(id int) recipeingredientOption {
	return func(m *RecipeIngredientMutation) {
		var (
			err   error
			once  sync.Once
			value *RecipeIngredient
		)
		m.oldValue = func(ctx context.Context) (*RecipeIngredient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RecipeIngredient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipeIngredient sets the old RecipeIngredient of the mutation.
func withRecipeIngredient(node *RecipeIngredient) recipeingredientOption {
	return func(m *RecipeIngredientMutation) {
		m.oldValue = func(context.Context) (*RecipeIngredient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeIngredientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeIngredientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeIngredientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecipeIngredientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RecipeIngredient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuantity sets the "quantity" field.
func (m *RecipeIngredientMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *RecipeIngredientMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the RecipeIngredient entity.
// If the RecipeIngredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeIngredientMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *RecipeIngredientMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *RecipeIngredientMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *RecipeIngredientMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by id.
func (m *RecipeIngredientMutation) SetRecipeID(id int) {
	m.recipe = &id
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (m *RecipeIngredientMutation) ClearRecipe() {
	m.clearedrecipe = true
}

// RecipeCleared reports if the "recipe" edge to the Recipe entity was cleared.
func (m *RecipeIngredientMutation) RecipeCleared() bool {
	return m.clearedrecipe
}

// RecipeID returns the "recipe" edge ID in the mutation.
func (m *RecipeIngredientMutation) RecipeID() (id int, exists bool) {
	if m.recipe != nil {
		return *m.recipe, true
	}
	return
}

// RecipeIDs returns the "recipe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipeID instead. It exists only for internal usage by the builders.
func (m *RecipeIngredientMutation) RecipeIDs() (ids []int) {
	if id := m.recipe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipe resets all changes to the "recipe" edge.
func (m *RecipeIngredientMutation) ResetRecipe() {
	m.recipe = nil
	m.clearedrecipe = false
}

// AddIngredientIDs adds the "ingredient" edge to the Ingredient entity by ids.
func (m *RecipeIngredientMutation) AddIngredientIDs(ids ...int) {
	if m.ingredient == nil {
		m.ingredient = make(map[int]struct{})
	}
	for i := range ids {
		m.ingredient[ids[i]] = struct{}{}
	}
}

// ClearIngredient clears the "ingredient" edge to the Ingredient entity.
func (m *RecipeIngredientMutation) ClearIngredient() {
	m.clearedingredient = true
}

// IngredientCleared reports if the "ingredient" edge to the Ingredient entity was cleared.
func (m *RecipeIngredientMutation) IngredientCleared() bool {
	return m.clearedingredient
}

// RemoveIngredientIDs removes the "ingredient" edge to the Ingredient entity by IDs.
func (m *RecipeIngredientMutation) RemoveIngredientIDs(ids ...int) {
	if m.removedingredient == nil {
		m.removedingredient = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ingredient, ids[i])
		m.removedingredient[ids[i]] = struct{}{}
	}
}

// RemovedIngredient returns the removed IDs of the "ingredient" edge to the Ingredient entity.
func (m *RecipeIngredientMutation) RemovedIngredientIDs() (ids []int) {
	for id := range m.removedingredient {
		ids = append(ids, id)
	}
	return
}

// IngredientIDs returns the "ingredient" edge IDs in the mutation.
func (m *RecipeIngredientMutation) IngredientIDs() (ids []int) {
	for id := range m.ingredient {
		ids = append(ids, id)
	}
	return
}

// ResetIngredient resets all changes to the "ingredient" edge.
func (m *RecipeIngredientMutation) ResetIngredient() {
	m.ingredient = nil
	m.clearedingredient = false
	m.removedingredient = nil
}

// Where appends a list predicates to the RecipeIngredientMutation builder.
func (m *RecipeIngredientMutation) Where(ps ...predicate.RecipeIngredient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecipeIngredientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecipeIngredientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RecipeIngredient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecipeIngredientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecipeIngredientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RecipeIngredient).
func (m *RecipeIngredientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeIngredientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.quantity != nil {
		fields = append(fields, recipeingredient.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeIngredientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeIngredientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeIngredientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipeingredient.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeIngredientMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, recipeingredient.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeIngredientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeIngredientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recipeingredient.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeIngredientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeIngredientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeIngredientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RecipeIngredient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeIngredientMutation) ResetField(name string) error {
	switch name {
	case recipeingredient.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeIngredientMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.recipe != nil {
		edges = append(edges, recipeingredient.EdgeRecipe)
	}
	if m.ingredient != nil {
		edges = append(edges, recipeingredient.EdgeIngredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeIngredientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipeingredient.EdgeRecipe:
		if id := m.recipe; id != nil {
			return []ent.Value{*id}
		}
	case recipeingredient.EdgeIngredient:
		ids := make([]ent.Value, 0, len(m.ingredient))
		for id := range m.ingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeIngredientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedingredient != nil {
		edges = append(edges, recipeingredient.EdgeIngredient)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeIngredientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case recipeingredient.EdgeIngredient:
		ids := make([]ent.Value, 0, len(m.removedingredient))
		for id := range m.removedingredient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeIngredientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrecipe {
		edges = append(edges, recipeingredient.EdgeRecipe)
	}
	if m.clearedingredient {
		edges = append(edges, recipeingredient.EdgeIngredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeIngredientMutation) EdgeCleared(name string) bool {
	switch name {
	case recipeingredient.EdgeRecipe:
		return m.clearedrecipe
	case recipeingredient.EdgeIngredient:
		return m.clearedingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeIngredientMutation) ClearEdge(name string) error {
	switch name {
	case recipeingredient.EdgeRecipe:
		m.ClearRecipe()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeIngredientMutation) ResetEdge(name string) error {
	switch name {
	case recipeingredient.EdgeRecipe:
		m.ResetRecipe()
		return nil
	case recipeingredient.EdgeIngredient:
		m.ResetIngredient()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient edge %s", name)
}
