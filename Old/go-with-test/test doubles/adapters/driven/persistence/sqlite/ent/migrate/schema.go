// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// IngredientsColumns holds the columns for the "ingredients" table.
	IngredientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "vegan", Type: field.TypeBool, Default: false},
		{Name: "pantry_ingredient", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// IngredientsTable holds the schema information for the "ingredients" table.
	IngredientsTable = &schema.Table{
		Name:       "ingredients",
		Columns:    IngredientsColumns,
		PrimaryKey: []*schema.Column{IngredientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ingredients_pantries_ingredient",
				Columns:    []*schema.Column{IngredientsColumns[3]},
				RefColumns: []*schema.Column{PantriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PantriesColumns holds the columns for the "pantries" table.
	PantriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "quantity", Type: field.TypeInt},
	}
	// PantriesTable holds the schema information for the "pantries" table.
	PantriesTable = &schema.Table{
		Name:       "pantries",
		Columns:    PantriesColumns,
		PrimaryKey: []*schema.Column{PantriesColumns[0]},
	}
	// RecipesColumns holds the columns for the "recipes" table.
	RecipesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "meal_type", Type: field.TypeInt},
	}
	// RecipesTable holds the schema information for the "recipes" table.
	RecipesTable = &schema.Table{
		Name:       "recipes",
		Columns:    RecipesColumns,
		PrimaryKey: []*schema.Column{RecipesColumns[0]},
	}
	// RecipeIngredientsColumns holds the columns for the "recipe_ingredients" table.
	RecipeIngredientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "recipe_recipeingredient", Type: field.TypeInt, Nullable: true},
	}
	// RecipeIngredientsTable holds the schema information for the "recipe_ingredients" table.
	RecipeIngredientsTable = &schema.Table{
		Name:       "recipe_ingredients",
		Columns:    RecipeIngredientsColumns,
		PrimaryKey: []*schema.Column{RecipeIngredientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "recipe_ingredients_recipes_recipeingredient",
				Columns:    []*schema.Column{RecipeIngredientsColumns[2]},
				RefColumns: []*schema.Column{RecipesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RecipeIngredientIngredientColumns holds the columns for the "recipe_ingredient_ingredient" table.
	RecipeIngredientIngredientColumns = []*schema.Column{
		{Name: "recipe_ingredient_id", Type: field.TypeInt},
		{Name: "ingredient_id", Type: field.TypeInt},
	}
	// RecipeIngredientIngredientTable holds the schema information for the "recipe_ingredient_ingredient" table.
	RecipeIngredientIngredientTable = &schema.Table{
		Name:       "recipe_ingredient_ingredient",
		Columns:    RecipeIngredientIngredientColumns,
		PrimaryKey: []*schema.Column{RecipeIngredientIngredientColumns[0], RecipeIngredientIngredientColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "recipe_ingredient_ingredient_recipe_ingredient_id",
				Columns:    []*schema.Column{RecipeIngredientIngredientColumns[0]},
				RefColumns: []*schema.Column{RecipeIngredientsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "recipe_ingredient_ingredient_ingredient_id",
				Columns:    []*schema.Column{RecipeIngredientIngredientColumns[1]},
				RefColumns: []*schema.Column{IngredientsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		IngredientsTable,
		PantriesTable,
		RecipesTable,
		RecipeIngredientsTable,
		RecipeIngredientIngredientTable,
	}
)

func init() {
	IngredientsTable.ForeignKeys[0].RefTable = PantriesTable
	RecipeIngredientsTable.ForeignKeys[0].RefTable = RecipesTable
	RecipeIngredientIngredientTable.ForeignKeys[0].RefTable = RecipeIngredientsTable
	RecipeIngredientIngredientTable.ForeignKeys[1].RefTable = IngredientsTable
}
