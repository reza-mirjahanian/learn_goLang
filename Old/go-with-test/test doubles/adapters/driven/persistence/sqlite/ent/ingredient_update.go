// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/ingredient"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/pantry"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/predicate"
	"github.com/quii/go-fakes-and-contracts/adapters/driven/persistence/sqlite/ent/recipeingredient"
)

// IngredientUpdate is the builder for updating Ingredient entities.
type IngredientUpdate struct {
	config
	hooks    []Hook
	mutation *IngredientMutation
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iu *IngredientUpdate) Where(ps ...predicate.Ingredient) *IngredientUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IngredientUpdate) SetName(s string) *IngredientUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetVegan sets the "vegan" field.
func (iu *IngredientUpdate) SetVegan(b bool) *IngredientUpdate {
	iu.mutation.SetVegan(b)
	return iu
}

// SetNillableVegan sets the "vegan" field if the given value is not nil.
func (iu *IngredientUpdate) SetNillableVegan(b *bool) *IngredientUpdate {
	if b != nil {
		iu.SetVegan(*b)
	}
	return iu
}

// SetPantryID sets the "pantry" edge to the Pantry entity by ID.
func (iu *IngredientUpdate) SetPantryID(id int) *IngredientUpdate {
	iu.mutation.SetPantryID(id)
	return iu
}

// SetNillablePantryID sets the "pantry" edge to the Pantry entity by ID if the given value is not nil.
func (iu *IngredientUpdate) SetNillablePantryID(id *int) *IngredientUpdate {
	if id != nil {
		iu = iu.SetPantryID(*id)
	}
	return iu
}

// SetPantry sets the "pantry" edge to the Pantry entity.
func (iu *IngredientUpdate) SetPantry(p *Pantry) *IngredientUpdate {
	return iu.SetPantryID(p.ID)
}

// AddRecipeingredientIDs adds the "recipeingredient" edge to the RecipeIngredient entity by IDs.
func (iu *IngredientUpdate) AddRecipeingredientIDs(ids ...int) *IngredientUpdate {
	iu.mutation.AddRecipeingredientIDs(ids...)
	return iu
}

// AddRecipeingredient adds the "recipeingredient" edges to the RecipeIngredient entity.
func (iu *IngredientUpdate) AddRecipeingredient(r ...*RecipeIngredient) *IngredientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.AddRecipeingredientIDs(ids...)
}

// Mutation returns the IngredientMutation object of the builder.
func (iu *IngredientUpdate) Mutation() *IngredientMutation {
	return iu.mutation
}

// ClearPantry clears the "pantry" edge to the Pantry entity.
func (iu *IngredientUpdate) ClearPantry() *IngredientUpdate {
	iu.mutation.ClearPantry()
	return iu
}

// ClearRecipeingredient clears all "recipeingredient" edges to the RecipeIngredient entity.
func (iu *IngredientUpdate) ClearRecipeingredient() *IngredientUpdate {
	iu.mutation.ClearRecipeingredient()
	return iu
}

// RemoveRecipeingredientIDs removes the "recipeingredient" edge to RecipeIngredient entities by IDs.
func (iu *IngredientUpdate) RemoveRecipeingredientIDs(ids ...int) *IngredientUpdate {
	iu.mutation.RemoveRecipeingredientIDs(ids...)
	return iu
}

// RemoveRecipeingredient removes "recipeingredient" edges to RecipeIngredient entities.
func (iu *IngredientUpdate) RemoveRecipeingredient(r ...*RecipeIngredient) *IngredientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.RemoveRecipeingredientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IngredientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngredientUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngredientUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ingredient.Table, ingredient.Columns, sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(ingredient.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Vegan(); ok {
		_spec.SetField(ingredient.FieldVegan, field.TypeBool, value)
	}
	if iu.mutation.PantryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ingredient.PantryTable,
			Columns: []string{ingredient.PantryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pantry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PantryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ingredient.PantryTable,
			Columns: []string{ingredient.PantryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pantry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.RecipeingredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedRecipeingredientIDs(); len(nodes) > 0 && !iu.mutation.RecipeingredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RecipeingredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IngredientUpdateOne is the builder for updating a single Ingredient entity.
type IngredientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngredientMutation
}

// SetName sets the "name" field.
func (iuo *IngredientUpdateOne) SetName(s string) *IngredientUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetVegan sets the "vegan" field.
func (iuo *IngredientUpdateOne) SetVegan(b bool) *IngredientUpdateOne {
	iuo.mutation.SetVegan(b)
	return iuo
}

// SetNillableVegan sets the "vegan" field if the given value is not nil.
func (iuo *IngredientUpdateOne) SetNillableVegan(b *bool) *IngredientUpdateOne {
	if b != nil {
		iuo.SetVegan(*b)
	}
	return iuo
}

// SetPantryID sets the "pantry" edge to the Pantry entity by ID.
func (iuo *IngredientUpdateOne) SetPantryID(id int) *IngredientUpdateOne {
	iuo.mutation.SetPantryID(id)
	return iuo
}

// SetNillablePantryID sets the "pantry" edge to the Pantry entity by ID if the given value is not nil.
func (iuo *IngredientUpdateOne) SetNillablePantryID(id *int) *IngredientUpdateOne {
	if id != nil {
		iuo = iuo.SetPantryID(*id)
	}
	return iuo
}

// SetPantry sets the "pantry" edge to the Pantry entity.
func (iuo *IngredientUpdateOne) SetPantry(p *Pantry) *IngredientUpdateOne {
	return iuo.SetPantryID(p.ID)
}

// AddRecipeingredientIDs adds the "recipeingredient" edge to the RecipeIngredient entity by IDs.
func (iuo *IngredientUpdateOne) AddRecipeingredientIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.AddRecipeingredientIDs(ids...)
	return iuo
}

// AddRecipeingredient adds the "recipeingredient" edges to the RecipeIngredient entity.
func (iuo *IngredientUpdateOne) AddRecipeingredient(r ...*RecipeIngredient) *IngredientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.AddRecipeingredientIDs(ids...)
}

// Mutation returns the IngredientMutation object of the builder.
func (iuo *IngredientUpdateOne) Mutation() *IngredientMutation {
	return iuo.mutation
}

// ClearPantry clears the "pantry" edge to the Pantry entity.
func (iuo *IngredientUpdateOne) ClearPantry() *IngredientUpdateOne {
	iuo.mutation.ClearPantry()
	return iuo
}

// ClearRecipeingredient clears all "recipeingredient" edges to the RecipeIngredient entity.
func (iuo *IngredientUpdateOne) ClearRecipeingredient() *IngredientUpdateOne {
	iuo.mutation.ClearRecipeingredient()
	return iuo
}

// RemoveRecipeingredientIDs removes the "recipeingredient" edge to RecipeIngredient entities by IDs.
func (iuo *IngredientUpdateOne) RemoveRecipeingredientIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.RemoveRecipeingredientIDs(ids...)
	return iuo
}

// RemoveRecipeingredient removes "recipeingredient" edges to RecipeIngredient entities.
func (iuo *IngredientUpdateOne) RemoveRecipeingredient(r ...*RecipeIngredient) *IngredientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.RemoveRecipeingredientIDs(ids...)
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iuo *IngredientUpdateOne) Where(ps ...predicate.Ingredient) *IngredientUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IngredientUpdateOne) Select(field string, fields ...string) *IngredientUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ingredient entity.
func (iuo *IngredientUpdateOne) Save(ctx context.Context) (*Ingredient, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngredientUpdateOne) SaveX(ctx context.Context) *Ingredient {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngredientUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IngredientUpdateOne) sqlSave(ctx context.Context) (_node *Ingredient, err error) {
	_spec := sqlgraph.NewUpdateSpec(ingredient.Table, ingredient.Columns, sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ingredient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingredient.FieldID)
		for _, f := range fields {
			if !ingredient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(ingredient.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Vegan(); ok {
		_spec.SetField(ingredient.FieldVegan, field.TypeBool, value)
	}
	if iuo.mutation.PantryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ingredient.PantryTable,
			Columns: []string{ingredient.PantryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pantry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PantryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ingredient.PantryTable,
			Columns: []string{ingredient.PantryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pantry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.RecipeingredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedRecipeingredientIDs(); len(nodes) > 0 && !iuo.mutation.RecipeingredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RecipeingredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeingredientTable,
			Columns: ingredient.RecipeingredientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ingredient{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
